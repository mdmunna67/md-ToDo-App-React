{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItem","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","app","handleAdd","bind","handleInput","handleDelete","state","curItem","this","setState","Date","now","preventDefault","newitem","newitems","filterItem","filter","forEach","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAsCeA,MAjCf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACGC,KAAI,SAAAC,GACvB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KACzCC,SAAU,SAACC,GACPZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QAIhD,8BACI,kBAAC,IAAD,CACAD,UAAU,UACVU,KAAK,QACLC,QAAS,WACLhB,EAAMiB,WAAWb,EAAKE,cAOtC,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC/BlB,K,eCzBbmB,IAAQC,IAAIC,K,IAwFGC,E,YApFb,WAAYvB,GAAO,IAAD,8BAChB,4CAAMA,KACDwB,UAAU,EAAKA,UAAUC,KAAf,gBACf,EAAKC,YAAY,EAAKA,YAAYD,KAAjB,gBACjB,EAAKE,aAAa,EAAKA,aAAaF,KAAlB,gBAClB,EAAKZ,UAAU,EAAKA,UAAUY,KAAf,gBACf,EAAKG,MAAQ,CACX1B,MAAM,GACN2B,QAAQ,CACNnB,KAAK,GACLJ,IAAI,KAVQ,E,yEAeNM,GAEVkB,KAAKC,SAAS,CACZF,QAAS,CACPnB,KAAME,EAAEE,OAAOL,MACfH,IAAI0B,KAAKC,W,gCAKLrB,GACRA,EAAEsB,iBACF,IAAMC,EAAUL,KAAKF,MAAMC,QAC3B,GAAkB,KAAfM,EAAQzB,KAAU,CACnB,IAAM0B,EAAQ,sBAAON,KAAKF,MAAM1B,OAAlB,CAAwBiC,IACtCL,KAAKC,SAAS,CACZ7B,MAAMkC,EACNP,QAAS,CACPnB,KAAK,GACLJ,IAAI,S,mCAMCA,GACX,IAAM+B,EAAaP,KAAKF,MAAM1B,MAAMoC,QAAO,SAAAlC,GAAI,OAC7CA,EAAKE,MAAMA,KACXwB,KAAKC,SAAS,CACZ7B,MAAMmC,M,gCAIF3B,EAAKJ,GACb,IAAMJ,EAAQ4B,KAAKF,MAAM1B,MACvBA,EAAMqC,SAAQ,SAAAnC,GACXA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGdoB,KAAKC,SAAS,CACZ7B,MAAMA,M,+BAKR,OACE,yBAAKG,UAAU,OACX,gCACE,0BAAMG,GAAG,YAAYgC,SAAUV,KAAKN,WAClC,2BACAjB,KAAK,OACLkC,YAAY,cACZhC,MAAOqB,KAAKF,MAAMC,QAAQnB,KAC1BC,SAAUmB,KAAKJ,cAEf,4BAAQnB,KAAK,UAAb,SAGJ,kBAAC,EAAD,CACEL,MAAO4B,KAAKF,MAAM1B,MAClBe,WAAYa,KAAKH,aACjBd,UAAWiB,KAAKjB,iB,GA/EV6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3039ecd9.chunk.js","sourcesContent":["import  React  from \"react\";\nimport  \"./ListItems.css\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport FlipMove from \"react-flip-move\"\n\nfunction ListItems(props) {\n    const items = props.items\n    const listItem = items.map(item=>{\n        return <div className='list' key={item.key}>\n            <p>\n                <input type='text' id={item.key} value={item.text}\n                    onChange={(e)=>{\n                        props.setUpdate(e.target.value,item.key)\n                    }}\n                />\n               \n            <span>\n                <FontAwesomeIcon \n                className='faicons' \n                icon='trash'\n                onClick={()=>{\n                    props.deleteItem(item.key)\n                }}    \n                />\n            </span>\n            </p>\n        </div>\n    })\n    return (\n        <div> \n            <FlipMove duration={300} easing='ease-in-out'>\n            {listItem}\n            </FlipMove>\n            \n        </div>\n    )\n}\n\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from \"./ListItems\";\nimport \"@fortawesome/fontawesome-svg-core\";\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\"\nlibrary.add(faTrash)\n\nclass app extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.handleAdd=this.handleAdd.bind(this)\n    this.handleInput=this.handleInput.bind(this)\n    this.handleDelete=this.handleDelete.bind(this)\n    this.setUpdate=this.setUpdate.bind(this)\n    this.state = {\n      items:[],\n      curItem:{\n        text:'',\n        key:''\n      }\n    }\n  }\n\n  handleInput(e){\n    // console.log(e.target.value);\n    this.setState({\n      curItem: {\n        text: e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  handleAdd(e){\n    e.preventDefault()\n    const newitem = this.state.curItem\n    if(newitem.text!==\"\"){\n      const newitems = [...this.state.items,newitem]\n      this.setState({\n        items:newitems,\n        curItem: {\n          text:'',\n          key:''\n        }\n      })\n    }\n  }\n\n  handleDelete(key){\n    const filterItem = this.state.items.filter(item => \n      item.key!==key)\n      this.setState({\n        items:filterItem\n      })\n  }\n\n  setUpdate(text,key){\n    const items = this.state.items\n      items.forEach(item => {\n      if(item.key===key){\n        item.text=text\n      }\n    })\n    this.setState({\n      items:items\n    })\n  }\n\n  render(){\n    return(\n      <div className='app'>\n          <header>\n            <form id='todo-form' onSubmit={this.handleAdd}>\n              <input \n              type='text' \n              placeholder='Enter Text!'\n              value={this.state.curItem.text}\n              onChange={this.handleInput}\n              />\n              <button type='submit'>Add</button>\n            </form>\n          </header>\n          <ListItems \n            items={this.state.items} \n            deleteItem={this.handleDelete}\n            setUpdate={this.setUpdate}> \n          </ListItems>\n      </div>\n    )\n  }\n}\n\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}